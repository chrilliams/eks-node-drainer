AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  eks-node-drainer

Metadata:
  AWS::ServerlessRepo::Application:
    Name: eks-node-drainer
    Description: Safely drain EKS node during cloudformation updates (autoscaling groups)
    Author: Chris Williams
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README-sar.md
    Labels: ['eks', 'node', 'drain']
    HomePageUrl: https://techblog.chrilliams.co.uk/eks-safe-node-draining
    SemanticVersion: 1.0.19
    SourceCodeUrl: https://github.com/chrilliams/eks-node-drainer

Parameters:
  SecurityGroup:
    Type: String
    Default: ""
    Description: Security Group for Node Drainer lambda, this needs access to the Kube API.
  Subnet:
    Type: String
    Default: ""
    Description: Subnet for Node Drainer lambda



# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900 # maximum of 15 minutes
Conditions:
  NoVPC: !Equals [!Ref SecurityGroup, ""]

Resources:
  EKSNodeDrainerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: EKSNodeDrainerExecutionPolicy
    Properties:
      CodeUri: drainer/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt EKSNodeDrainerExecutionRole.Arn
      VpcConfig: 
        !If 
          - NoVPC
          - !Ref "AWS::NoValue"
          - SecurityGroupIds:
              - !Ref SecurityGroup
            SubnetIds:
              - !Ref Subnet
      Events:
        EKSNodeDrainer:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - 'aws.autoscaling'
              detail-type:
                - 'EC2 Instance-terminate Lifecycle Action'

  EKSNodeDrainerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  EKSNodeDrainerExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EKSNodeDrainerRolePolicy
      Roles:
      - !Ref EKSNodeDrainerExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
              - eks:DescribeCluster
            Resource: !Sub 'arn:aws:eks:${AWS::Region}:${AWS::AccountId}:cluster/*'
          - Effect: Allow
            Action:
              - sts:GetCallerIdentity
              - ec2:DescribeInstances
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DescribeTags
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
            Resource: "*"

Outputs:
  EKSNodeDrainerExecutionRoleName:
    Value: !GetAtt EKSNodeDrainerExecutionRole.Arn